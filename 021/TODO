DONE

	Sketch out index server

	Adjust packets so there are specific packet types per-component, eg. world server ping packet and so on.

	Setup player.go so it has a listen TCP socket, so it has a TCP address that it can tell the index server to listen on.

	Implement player server connect packet

	Implement player server disconnect packet

	Make sure that index server sees player server connect

TODO

	Index server generate a tag for player server on connect.

	Respond with tag in player server connect response.

	Player server print out tag post connect, uint32.

	-----------

	Player server sends disconnect packet to index server on quit, waits for response.

	Index server sends player server disconnect response.

	Verify that player server shuts down clean on CTRL-C

	-----------

	Index server track the map of player servers under mutex, indexed by tag.

	Send down the player server connect response with all connected player servers at the time (excluding current connecting player server).

	-----------

	Concept of player server tag, eg. n

	This way when I track what player server a player is on, I can respond with tag, instead of the address of the server

	Player servers need to track the other player servers, and maintain a map of tag -> player server address.

	-----------

	Work out how to get multiple players servers running, eg. with HTTP_PORT env var?

	When a player server connects, broadcast out to existing player servers that it has connected.

	When a player server disconnects, broadcast out to existing player servers that it has disconnected.

	Verify that a late connecting player server sees the set of player servers already connected when it connects.

	-----------

	Index server tracks which player server players are on

	Async function to index server with a session id, will tell you which player server it is on, or NULL if unknown.

	-----------

	World server keeps track of which player server a player is on, via the player shallow state update.

	Hack up world server raycast (pick random player)

	When player is returned 

	-----------

	Implement damage player

	-----------

	Implement index server packets for index server player server connect, index server player server disconnect, sent from player server to the index server.

	Make player server respond to connect message with player server connect response, which will include the set of player servers that are currently connected to the index server.

	Hook up each player server so it connects to the index server on startup, and sends a player server connect message on join, and reads the response.

	Player server should have logs on player server

	Extend the player server to send player server disconnect message to index server when it quits, and to wait for the response (or EOF), so it disconnects clean.

	Add notification messages post-connect, so already connected player servers are notified when new player servers connect or disconnect from the index server.

	Make sure that player servers are tracking the set of other player servers correctly with logs.

	-----------

	Extend to track the set of players on the player server.

	eg. on player server connect, also respond with set of session ids on the player server right now.

	and then as players connect and disconnect from the player server update the index server with this, player joined [session_id] player left [session_id].

	-----------
