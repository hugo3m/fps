DONE

	Modify the index server so it defines the world dimensions and grid size.

	I think it's important to generalize the definition of the world into zones.

	The zones map to world databases.

	Each zone is defined as a collection of one or more convex volumes.

	This should be generic enough to loosely define any zone shape.

	Bring in code for read/write uint32 uint64, etc. with *int index

	Implement code to serialize the world.

	Extend so zones have origins

	Implement code in the player server to request the world data and receive the response

	Rename world database to zone database

	Implement code to generate the set of zones and world AABB for a grid cell world.

	zones need an id

	Fix various bugs setting up grid world zones

	Zone database connects to index server

	Zone database gets the world data down from the index server

	Add new connect/disconnect messages for zone database

	Make sure disconnect is sent on ctrl-c on zone database

	Zone database passes zoneId param to connect, give me any zone (zoneId=0), or give me a specific zone.

	A free zone is selected on connect if zero zone id is passed in, otherwise if zone is already free, disconnect the client.

	Remove concept of player server "tag" and uniformly rename to id

	Implement a constant time lookup from position -> zone ids via a low resolution grid.

	Implement convex volume inside test

TODO

	Unit test the convex volume inside test

	-----------

	Work out standard representation for position in the player state so it is known on both sides

	-----------

	As player moves track the current set of zones subscribed to player state

	-----------

	Connect and disconnect TCP connections to the zone databases as the player moves

	-----------

	Hack up world server raycast (pick random player)

	When player is returned pass tag + session id

	-----------

	Implement damage player

	-----------
